steese$SPP[steese$SPP == "SAGL"] <- "SALIX"
steese$SPP[steese$SPP == "SA_4"] <- "SALIX"
steese$SPP[steese$SPP == "SA_5"] <- "SALIX"
steese$SPP[steese$SPP == "SA_6"] <- "SALIX"
steese$SPP[steese$SPP == "SA_7"] <- "SALIX"
steese$SPP[steese$SPP == "SADE"] <- "SALIX"
# adding conifer and deciduous divisons
steese$DIV[steese$SPP == "PIME"] <- "c"
steese$DIV[steese$SPP == "BENE"] <- "d"
steese$DIV[steese$SPP == "POTR"] <- "d"
steese$DIV[steese$SPP == "POBA"] <- "d"
steese$DIV[steese$SPP == "SALIX"] <- "d"
steese$DIV[steese$SPP == "ARCTO"] <- "d"
steese$DIV[steese$SPP == "ALCR"] <- "d"
# dropping dead trees
steese <- steese %>%
filter(CANOPY > 0)
# summing according to species
steese_dens <- steese %>%
group_by(SITE, TREAT, PLOT, DIV, SPP) %>%
tally() %>%
rename("COUNT_unscale" = "n")
# scaling up
steese_dens$COUNT <- steese_dens$COUNT_unscale
unique(steese$PLOT[steese$QUAD ==1]) # "33_1" "18_1" "4_2"  "19_2" "28_1" "1_0"  "31_0" "6_0"  "9_0"
steese_dens$COUNT[steese_dens$PLOT == "33_1"] <- steese_dens$COUNT[steese_dens$PLOT == "33_1"]*2
steese_dens$COUNT[steese_dens$PLOT == "18_1"] <- steese_dens$COUNT[steese_dens$PLOT == "18_1"]*2
steese_dens$COUNT[steese_dens$PLOT == "4_2"] <- steese_dens$COUNT[steese_dens$PLOT == "4_2"]*2
steese_dens$COUNT[steese_dens$PLOT == "19_2"] <- steese_dens$COUNT[steese_dens$PLOT == "19_2"]*2
steese_dens$COUNT[steese_dens$PLOT == "28_1"] <- steese_dens$COUNT[steese_dens$PLOT == "28_1"]*2
steese_dens$COUNT[steese_dens$PLOT == "6_0"] <- steese_dens$COUNT[steese_dens$PLOT == "6_0"]*2
steese_dens$COUNT[steese_dens$PLOT == "1_0"] <- steese_dens$COUNT[steese_dens$PLOT == "1_0"]*2
steese_dens$COUNT[steese_dens$PLOT == "31_0"] <- steese_dens$COUNT[steese_dens$PLOT == "31_0"]*2
steese_dens$COUNT[steese_dens$PLOT == "9_0"] <- steese_dens$COUNT[steese_dens$PLOT == "9_0"]*2
steese_dens <- steese_dens %>%
select(SITE, PLOT, TREAT, DIV, SPP, COUNT)
seedling <- read.csv(here("seedling_Density.csv"))
seedling$COUNT <- seedling$SPP_COUNT_PLOT*2
seedling <- seedling %>%
select(SITE, PLOT, TREAT, DIVISION, SPP, COUNT) %>%
rename("DIV" = "DIVISION")
dalt_seed_dens <- bind_rows(dalton_dens, steese_dens, seedling)
species_dens <- dalt_seed_dens %>%
group_by(SITE, TREAT, PLOT, DIV, SPP) %>%
summarise(COUNT = sum(COUNT))
species_dens$COUNT_HA <- species_dens$COUNT * 50
write.csv(species_dens,"species_dens.csv", row.names = F)
# bringing in data
species_dens <- read.csv(("species_dens.csv"))
# removing unburned sites
species_dens <- species_dens[species_dens$TREAT !=0,]
# looking at format of data, first three rows
species_dens[1:3,]
#Different way of subsetting, base R
CONIF_dens <- subset(species_dens, species_dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens_new <- CONIF_dens_new[,1:4]						#remove extra columns
names(CONIF_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
CONIF_dens <- CONIF_dens_new								#back to original name so code below works
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
library(MASS)
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
summary(mC_D.nb)
library(tidyverse)
library(sjPlot)
library(MASS)
library(here)
library(parameters)
library(cowplot); theme_set(theme_cowplot())
################################################
##  density
# bringing in data
species_dens <- read.csv(("species_dens.csv"))
# removing unburned sites
species_dens <- species_dens[species_dens$TREAT !=0,]
# looking at format of data, first three rows
species_dens[1:3,]
#############################
## conifer density
#Different way of subsetting, base R
CONIF_dens <- subset(species_dens, species_dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens_new <- CONIF_dens_new[,1:4]						#remove extra columns
names(CONIF_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
CONIF_dens <- CONIF_dens_new								#back to original name so code below works
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
# calculating average distance between plots
library(here)
install.packages("fossil")
coord <- read.csv(here("data/site_locations.csv"))
library(fossil)
View(coord)
coord <- read.csv(here("data/site_locations.csv"))
library(tidyverse)
dalt_coord <- coord %>%
select(SITE == "DALTON")
coord <- read.csv(here("data/site_locations.csv"))
dalt_coord <- coord %>%
select(SITE == "DALTON")
dalt_coord <- coord %>%
select(coord$SITE == "DALTON")
library(here)
library(tidyverse)
install.packages("fossil")
library(fossil)
coord <- read.csv(here("data/site_locations.csv"))
install.packages("fossil")
coord <- read.csv(here("data/site_locations.csv"))
dalt_coord <- coord %>%
select(SITE == "DALTON")
dalt_coord <- coord %>%
select(SITE == "DALTON")
library(tidyverse)
dalt_coord <- coord %>%
select(SITE == "DALTON")
dalt_coord <- coord %>%
filter(SITE == "DALTON")
View(dalt_coord)
steese_coord <- coord %>%
filter(SITE == "STEESE")
dalt_coord <- dalt_coord[-c(1,2,3),]
dalt_coord <- coord %>%
filter(SITE == "DALTON")
dalt_coord <- dalt_coord[,-c(1,2,3)]
steese_coord <- steese_coord[,-c(1,2,3)]
earth.dist(dalt_coord)
library(fossil)
earth.dist(dalt_coord)
test <- earth.dist(dalt_coord)
test <- earth.dist(dalt_coord, dist = TRUE)
as.data.frame(test)
as.vector(test)
alt_dist <- earth.dist(dalt_coord, dist = TRUE)
dalt_dist <- as.vector(dalt_dist)
dalt_dist <- earth.dist(dalt_coord, dist = TRUE)
dalt_dist <- as.vector(dalt_dist)
rm(test, alt_dist)
mean(dalt_dist)
summary(dalt_dist)
dalt_dist <- dalt_dist/1000
summary(dalt_dist)
dalt_dist <- earth.dist(dalt_coord, dist = TRUE)
dalt_dist <- as.vector(dalt_dist)
summary(dalt_dist)
dalt_dist_m <- dalt_dist*1000
summary(dalt_dist_m)
stee_dist <- earth.dist(stee_coord, dist = TRUE)
stee_dist <- earth.dist(steese_coord, dist = TRUE)
stee_dist <- as.vector(stee_dist)
summary(stee_dist)
stee_dist_m <- stee_dist*1000
summary(stee_dist_m)
coord_dist_m <- c(dalt_dist_m, stee_dist_m)
summary(coord_dist_m)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
dalton <- read.csv(here("data/dalton_DBH.csv"))
#############################################
# getting values
species_dens <- read_csv(here("species_dens.csv"))
View(species_dens)
test <- species_dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT), SE = se(COUNT))
se <- function(x) sqrt(var(x)/length(x))
test <- species_dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT), SE = se(COUNT))
View(test)
test <- species_dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
treat_dens <- species_dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
rm(test)
View(treat_dens)
treat_dens$SE <- round(treat_dens$SE, digits = 3)
treat_dens$AV <- round(treat_dens$AV, digits = 3)
treat_dens$AV <- round(treat_dens$AV, digits = 2)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
dalt_treat_dens <- treat_dens %>%
filter(SITE == "DALTON")
View(dalt_treat_dens)
dalt_con_den <- dalt_treat_dens %>%
filter(DIV == "c")
View(dalt_con_den)
6681/45794
45794/12397
45794/6681
12397/767
stee_treat_dens <- treat_dens %>%
filter(SITE == "STEESE")
stee_con_density <- stee_treat_dens %>%
filter(DIV == "d")
stee_treat_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
View(stee_con_density)
View(dalt_con_den)
View(stee_con_density)
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
View(stee_con_dens)
View(stee_con_density)
rm(stee_con_density)
rm(stee_treat_dens, dalt_treat_dens)
12975/47893
47893/12975
51846/47893
51846/1620
dalt_dec_dens <- treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
View(dalt_dec_dens)
19310/308
11593/19310
11374/11593
stee_dec_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
View(stee_dec_dens)
1131/58
31883/11315
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
#############################################
# getting values
species_ba <- read_csv(here("species_ba.csv"))
View(species_ba)
treat_ba <- species_ba %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(BA_HA), SE = se(BA_HA))
treat_ba$SE <- round(treat_ba$SE, digits = 0)
treat_ba$AV <- round(treat_ba$AV, digits = 0)
dalt_con_ba <- treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
View(dalt_con_ba)
View(species_ba)
stee_con_ba <- treat_ba %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
View(stee_con_ba)
1153/121
2051/4
dalt_dec_ba <- treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
stee_dec_ba <- treat_ba %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
View(stee_dec_ba)
View(dalt_dec_ba)
4/8
42/8
59/42
8/5
5/8
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
#
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
ba.plot <- aggregate(DECID_BA$BA_ha, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
ba.trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_ba_new <- cbind(ba.plot, ba.trt[,2])						#combines
names(DECID_ba_new) <- c("PLOT","BA","TREAT")
ba.site <- cbind(DECID_BA$SITE,DECID_BA$PLOT)
temp <- as.data.frame(ba.site[!duplicated(ba.site[,2]),])
names(temp) <- c("SITE","PLOT")
DECID_BA <- merge(DECID_ba_new,temp,by="PLOT")	#double check all is well with the rows - right site/treatment/value
#histogram
hist(DECID_BA$BA)
#histogram
hist(DECID_BA$BA)
hist(log(DECID_BA$BA))	#log transforming
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
library(logNormReg)  #another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(3,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
par(mfrow=c(1,4))
plot((DECID_BA$BA),residuals(mD_BA.log),main="log"); abline(h=0)
plot((DECID_BA$BA),residuals(mD_BA.ga), main="Gaussian"); abline(h=0)	#pretty clear Gaussian is not great.
plot((DECID_BA$BA),residuals(mD_BA.gamma), main="Gamma"); abline(h=0)
plot((DECID_BA$BA),residuals(BA_logn), main="Lognormal"); abline(h=0)
summary(mD_BA.log)
summary(mD_BA.ga)
summary(mD_BA.gamma)
summary(BA_logn)
sqrt(mean(mD_BA.log$residuals^2))
sqrt(mean(mD_BA.ga$residuals^2))
sqrt(mean(mD_BA.gamma$residuals^2))
sqrt(mean(BA_logn$residuals^2))
par(mfrow=c(1,4)	)
plot(exp(predict(mD_BA.log)),DECID_BA$BA, main="logged LM")	#plots the exponentiated prediction back
abline(0,1)
plot((predict(mD_BA.ga, type="response")),DECID_BA$BA, main="Guassian")	#plots the exponentiated prediction back
abline(0,1)
plot(predict(mD_BA.gamma, type="response"),DECID_BA$BA, main="Gamma with log link")	#plots the exponentiated prediction back
abline(0,1)
plot(BA_logn$fitted.values,DECID_BA$BA, main = "lognormal")	#plots the exponentiated prediction back
abline(0,1)
sqrt(mean(mD_BA.log$residuals^2))
sqrt(mean(mD_BA.ga$residuals^2))
sqrt(mean(mD_BA.gamma$residuals^2))
sqrt(mean(BA_logn$residuals^2))
View(DECID_BA)
library(tidyverse)
library(sjPlot)
library(MASS)
library(here)
library(parameters)
library(logNormReg)
library(cowplot); theme_set(theme_cowplot())
test <- ba %>%
filter(DIV == "d") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA = sum(BA_ha)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA = 0))
View(ba)
########################
## deciduous basal area
ba$BA_ha <- ba$BA * 50
test <- ba %>%
filter(DIV == "d") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA = sum(BA_ha)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA = 0))
View(test)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
View(DECID_BA)
unique(DECID_BA$QUAD)
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
ba.plot <- aggregate(DECID_BA$BA_ha, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
ba.trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_ba_new <- cbind(ba.plot, ba.trt[,2])						#combines
names(DECID_ba_new) <- c("PLOT","BA","TREAT")
ba.site <- cbind(DECID_BA$SITE,DECID_BA$PLOT)
temp <- as.data.frame(ba.site[!duplicated(ba.site[,2]),])
names(temp) <- c("SITE","PLOT")
DECID_BA <- merge(DECID_ba_new,temp,by="PLOT")	#double check all is well with the rows - right site/treatment/value
#histogram
hist(DECID_BA$BA)
hist(log(DECID_BA$BA))	#log transforming
dev.off()
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
View(ba)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
View(ba)
dalton <- read.csv(head("data/Dalton_DBH.csv"))
dalton$QUAD[dalton$PLOT == "32_2"]
dalton$QUAD[dalton$PLOT == "32_2"] <- 1
dalton$QUAD[dalton$PLOT == "32_9"] <- 1
test <- dalton %>%
group_by(PLOT) %>%
summarise(mean = mean(QUAD))
View(test)
test <- dalton %>%
group_by(SITE, PLOT) %>%
summarise(mean = mean(QUAD))
test <- dalton %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
View(test)
steese <- read.csv(head("data/Steese_DBH.csv"))
test <- steese %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
View(test)
dalton <- read.csv(head("data/Dalton_DBH.csv"))
test <- dalton %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
View(test)
test <- steese %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
steese$PLOT[steese$PLOT == "36_3"] <- "36_1"
steese$TREAT[steese$PLOT == "36_3"] <- 1
test <- steese %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
steese <- read.csv(head("data/Steese_DBH.csv"))
dalton <- read.csv(head("data/Dalton_DBH.csv"))
test <- dalton %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
dalton$QUAD[dalton$PLOT == "32_2"] <- 1
dalton$QUAD[dalton$PLOT == "32_9"] <- 1
dalton$QUAD[dalton$PLOT == "48_1"] <- 1
dalton$QUAD[dalton$PLOT == "56_2"] <- 1
dalton$QUAD[dalton$PLOT == "7_3"] <- 0.2
dalton$QUAD[dalton$PLOT == "12_1"] <- 0.2
dalton$QUAD[dalton$PLOT == "50_1"] <- 0.2
steese <- read.csv(head("data/Steese_DBH.csv"))
test <- steese %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(mean = mean(QUAD))
steese$QUAD[steese$PLOT == "34_2"] <- 1
write.csv(dalton, "data/Dalton_DBH.csv")
write.csv(dalton, "data/Dalton_DBH.csv", row.names = F)
write.csv(steese, "data/Steese_DBH.csv", row.names = F)
dalton <- read.csv(here("data/Dalton_DBH.csv"), stringsAsFactors = F)
# merging salix
dalton$SPP[dalton$SPP == "SAGL"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_3"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_4"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_5"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_6"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_7"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_8"] <- "SALIX"
dalton$SPP[dalton$SPP == "SA_?"] <- "SALIX"
dalton$SPP[dalton$SPP == "SADE"] <- "SALIX"
dalton$SPP[dalton$SPP == "SAPU"] <- "SALIX"
dalton$SPP[dalton$SPP == "SAGL_R"] <- "SALIX"
# dropping unknown
dalton <- dalton %>%
filter(SPP != "UNKNOWN")
# dropping dead trees
dalton <- dalton %>%
filter(CANOPY > 0)
# adding conifer and deciduous divisons
dalton$DIV[dalton$SPP == "PIME"] <- "c"
dalton$DIV[dalton$SPP == "BENE"] <- "d"
dalton$DIV[dalton$SPP == "POTR"] <- "d"
dalton$DIV[dalton$SPP == "SALIX"] <- "d"
dalton$DIV[dalton$SPP == "ARCTO"] <- "d"
dalton$DIV[dalton$SPP == "ALCR"] <- "d"
unique(dalton$QUAD)
dalton$QUAD[dalton$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
dalton$QUAD[dalton$QUAD == 1] <- 100
dalton$QUAD[dalton$QUAD == .2] <- 500
# calculating ba
dalton$BA_unscale <- (pi * (dalton$DBH/2)^2)/10000
dalton$BA_ha <- dalton$BA_unscale* dalton$QUAD		#multiply by expansion factor
