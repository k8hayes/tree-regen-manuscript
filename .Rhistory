regen.dist.inv[1:5, 1:5]
Moran.I(stee1$COUNT_HA, regen.dist)
stee2 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(stee2$LONG, stee2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee2$COUNT_HA, regen.dist)
stee3 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee3$COUNT_HA, regen.dist)
ba <- read.csv(here("data/ba.csv"))
ba <- read.csv(here("ba.csv"))
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# getting order of sites in ba
order <- as.vector(unique(ba$PLOT))
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to baity file
ba$LAT <- attrib$LAT
ba <- read.csv(here("ba.csv"))
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
dens <- read.csv(here("data/density.csv"))
View(dens)
View(ba)
spp_ba <- %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(BA = sum(BA_ha))
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT, SPP) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha)) %>%
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
unique(plot_ba$PLOT)
unique(dens$PLOT)
levels(plot_ba$PLOT)
levels(attrib$PLOT)
ba <- read.csv(here("ba.csv"))
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
ba <- read.csv(here("ba.csv"))
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
rm(spp_ba)
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
View(plot_ba)
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 1)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# getting order of sites in ba
order <- as.vector(unique(ba$PLOT))
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 1)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to baity file
ba$LAT <- attrib$LAT
ba$LONG <- attrib$LONG
plot_ba$LONG <- attrib$LONG
# adding in attributes to baity file
plot_ba$LAT <- attrib$LAT
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$dalt1_DIV, regen.dist)
Moran.I(dalt1$BA, regen.dist)
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt2 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt2 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt2$LONG, dalt2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt2$BA, regen.dist)
dalt3 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(dalt3$LONG, dalt3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt3$BA, regen.dist)
stee0 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(stee0$LONG, stee0$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee0$BA, regen.dist)
stee1 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(stee1$LONG, stee1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee1$BA, regen.dist)
stee2 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(stee2$LONG, stee2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee2$BA, regen.dist)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee3$BA, regen.dist)
stee3 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee3$BA, regen.dist)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(logNormReg)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
ba %>% group_by(SITE,PLOT) %>% summarise(sum(BA))
ba %>% group_by(SITE,PLOT) %>% summarise(sum(BA_ha))
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
DECID_BA <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
```
View(ba)
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
DECID_BA <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
# adding in covariates
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
summary(mD_BA.gamma) # AIC 58.2
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
summary(mD_BA.gamma.slope) # AIC 58.8
dens <- read.csv(here("data/density.csv"))
treat_dens <- dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(logNormReg)
dens <- read.csv(here("data/density.csv"))
treat_dens <- dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
View(ba)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(logNormReg)
dbh <- read.csv(here("data/dbh.csv"))
dbh$TREAT <- as.factor(dbh$TREAT)
# dropping dead trees
dbh <- dbh %>%
filter(CANOPY > 0)
# summing according to species
dens <- dbh %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(COUNT_PLOT = n()) %>%
ungroup() %>%
group_by(SITE, TREAT,PLOT) %>%
complete( SPP, fill = list(COUNT_PLOT = 0)) # adds zero-counts back in for species
# adding divisions back in
dens$DIV <- NA
dens$DIV[dens$SPP == "PIME"] <- "c"
dens$DIV[dens$SPP == "BENE"] <- "d"
dens$DIV[dens$SPP == "POTR"] <- "d"
dens$DIV[dens$SPP == "POBA"] <- "d"
dens$DIV[dens$SPP == "SALIX"] <- "d"
dens$DIV[dens$SPP == "ARCTO"] <- "d"
dens$DIV[dens$SPP == "ALCR"] <- "d"
dens$DIV <- as.factor(dens$DIV)
# adding expansion factor back
test <- dbh %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(EXP_FACT = max(EXP_FACT)) %>%
slice(rep(1:n(), each = 7)) %>% # 7 species at each plot, so each plot is 7 rows
ungroup()
dens$EXP_FACT <- test$EXP_FACT # adding expansion factors back in
# scaling up
dens$COUNT_ha <- dens$COUNT_PLOT * dens$EXP_FACT
seed <- read.csv(here("data/seedling_count_raw.csv"))
# adding expansion factors
seed$EXP_FACT <- NA
seed$EXP_FACT[seed$M2 == 100] <- 100
seed$EXP_FACT[seed$M2 == 10] <- 1000
seed$EXP_FACT[seed$M2 == 20] <- 500
seed$EXP_FACT[seed$M2 == 9] <- (10000/9)
# scaling up
seed$COUNT_ha <- seed$EXP_FACT * seed$TOTAL_COUNT
# combining seedling and dbh
seed <- seed %>%
group_by(SITE, TREAT, PLOT) %>%
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) # arranges species in the same order within plots
# also orders plots in same order within sites
# need to do to combine with dbh in a sec
# creating PIGL rows
# no white spruce at dbh height on plots, but need to add to combine with seedling file
test <- dens %>%
dplyr::select(SITE, TREAT, PLOT, EXP_FACT) %>% # need the dplyr because MASS package conflicts with select()
distinct() # creates file where each row is a plot, maintains expansion factors/site/treat
test$SPP <- as.factor("PIGL") # adds species
test$COUNT_ha <- 0 # adds zero count
test$COUNT_PLOT <- 0
test$DIV <- as.factor("c")
dens <- rbind(dens, test) # puts back into dbh file
dens <- dens %>%
group_by(SITE, TREAT, PLOT) %>% # same function as above # specifies order of species
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) %>%
rename(TREE_COUNT_PLOT = COUNT_PLOT, TREE_COUNT_HA = COUNT_ha,
TREE_EXP_FACT = EXP_FACT) # renames tree counts so we can combine with seedling
# combining files
dens$SEED_COUNT_PLOT <- seed$TOTAL_COUNT
dens$SEED_COUNT_HA <- seed$COUNT_ha
dens$SEED_EXP_FACT <- seed$EXP_FACT
# making sure number of fires is a factor
dens$TREAT <- as.factor(dens$TREAT)
# creating total count of both trees and seedlings
dens$COUNT_HA <- dens$TREE_COUNT_HA + dens$SEED_COUNT_HA
#  write.csv(dens, here("data/density.csv"), row.names = F)
#  write.csv(dens, here("data/density.csv"), row.names = F)
rm(test)
# removing unburned sites
dens <- dens[dens$TREAT !=0,]
dens$TREAT <- as.factor(dens$TREAT)
# looking at format of data, first three rows
dens[1:3,]
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned sites used here
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(unique(dens$PLOT)) # don't worry that its 42, remember this doesn't include unburned sites
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to density file
dens$SLOPE <- attrib$SLOPE
dens$ELEV <- attrib$ELEVATION
dens$SOLAR <- attrib$SOLAR
dens$TREAT <- as.factor(dens$TREAT)
# Different way of subsetting, base R
CONIF_dens <- subset(dens, dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens <- CONIF_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D    <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
summary(mC_D)
summary(mC_D_qp)
summary(mC_D.nb) # AIC 931
#to do so, adding them into the glm above, but then check the diagnostics again of course
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),
link = log, data = CONIF_dens)
par(mfrow=c(2,4))
plot(mC_D.nb, main="NB")
plot(mC_D.nb.slope, main="Slope")
summary(mC_D.nb) # AIC 924
summary(mC_D.nb.slope) # AIC 926
summary(mC_D.nb) # AIC 924
summary(mC_D.nb) # AIC 924
summary(mC_D.nb.slope) # AIC 926
DECID_dens <- subset(dens, dens$DIV == "d")
# the plots are duplicated with one entry per species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
temp2 <- temp[duplicated(temp[,1]),]										#merging and removing
temp3 <- temp2[duplicated(temp2[,1]),]        # have to loop through, since there's so many more species
temp4 <- temp3[duplicated(temp3[,1]),]        # absolutely sure there's a faster way to do this, just wanted to get it done
temp5 <- temp4[duplicated(temp4[,1]),]
DECID_dens_new <- temp5[duplicated(temp5[,1]),]
rm(temp,temp2, temp3, temp4, temp5, cnt, trt) 				# cleaning up workspace
DECID_dens <- DECID_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use							#back to original name so code below works
dev.off()
hist(DECID_dens$COUNT)									#check
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D.qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + (TREAT*SITE),link = log, data = DECID_dens)
class(DECID_dens$TREAT)
summary(mD_D.nb) # AIC 1087
summary(mD_D.nb.slope) # AIC 1089
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
DECID_BA <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(4,4))
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
summary(mD_BA.gamma) # AIC 55
summary(mD_BA.gamma.slope) # AIC 58.8
sqrt(mean(mD_BA.gamma$residuals^2)) # 0.82
sqrt(mean(mD_BA.gamma.slope$residuals^2)) # 0.80
sqrt(mean(mD_D.nb$residuals^2))
sqrt(mean(mD_D.nb.slope$residuals^2))
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + scale(SLOPE) + (TREAT*SITE), family = Gamma(link = "log"),
data = DECID_BA)
summary(mD_BA.gamma.slope) # AIC 54.1
sqrt(mean(mC_D.nb.slope$residuals^2))
sqrt(mean(mC_D.nb$residuals^2))
