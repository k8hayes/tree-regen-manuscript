scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
View(plot_ba)
View(ba)
plot_ba %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = BA_ha, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)  + ylim(0, 0.25) +
labs(x = "Number of Fires", y = "Basal Area (m2/ha)",
title = "Basal Area in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
plot_ba %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = BA_ha, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)  + ylim(0, 0.15) +
labs(x = "Number of Fires", y = "Basal Area (m2/ha)",
title = "Basal Area in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
plot_ba %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = BA_ha, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)   +
labs(x = "Number of Fires", y = "Basal Area (m2/ha)",
title = "Basal Area in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
ba$SITE[ba$SITE == "DALTON"] <- "Upland"
ba$SITE[ba$SITE == "STEESE"] <- "Lowland"
plot_ba <- ba %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA_ha = mean(BA_ha))
plot_ba %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = BA_ha, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)   +
labs(x = "Number of Fires", y = "Basal Area (m2/ha)",
title = "Basal Area in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
plot_ba %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = BA_ha, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)   +
labs(x = "Number of Fires", y = "Basal Area (m2/ha)",
title = "Av. Basal Area in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
#  testing distributions
library(magrittr)
library(tidyverse)
library(MASS)
library(here)
library(parameters)
library(logNormReg)
library(cowplot); theme_set(theme_cowplot())
# bringing in data
dens <- read.csv(here("data/density.csv"))
dens <- dens[dens$TREAT !=0,]
dens$TREAT <- as.factor(dens$TREAT)
# looking at format of data, first three rows
dens[1:3,]
CONIF_dens <- subset(dens, dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens <- CONIF_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D    <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
View(dens)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(parameters)
library(logNormReg)
dbh <- read.csv(here("data/dbh.csv"))
dbh$TREAT <- as.factor(dbh$TREAT)
# dropping dead trees
dbh <- dbh %>%
filter(CANOPY > 0)
# summing according to species
dens <- dbh %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(COUNT_PLOT = n()) %>%
ungroup() %>%
group_by(SITE, TREAT,PLOT) %>%
complete( SPP, fill = list(COUNT_PLOT = 0)) # adds zero-counts back in for species
# adding divisions back in
dens$DIV <- NA
dens$DIV[dens$SPP == "PIME"] <- "c"
dens$DIV[dens$SPP == "BENE"] <- "d"
dens$DIV[dens$SPP == "POTR"] <- "d"
dens$DIV[dens$SPP == "POBA"] <- "d"
dens$DIV[dens$SPP == "SALIX"] <- "d"
dens$DIV[dens$SPP == "ARCTO"] <- "d"
dens$DIV[dens$SPP == "ALCR"] <- "d"
dens$DIV <- as.factor(dens$DIV)
# adding expansion factor back
test <- dbh %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(EXP_FACT = max(EXP_FACT)) %>%
slice(rep(1:n(), each = 7)) %>% # 7 species at each plot, so each plot is 7 rows
ungroup()
dens$EXP_FACT <- test$EXP_FACT # adding expansion factors back in
# scaling up
dens$COUNT_ha <- dens$COUNT_PLOT * dens$EXP_FACT
seed <- read.csv(here("data/seedling_count_raw.csv"))
# adding expansion factors
seed$EXP_FACT <- NA
seed$EXP_FACT[seed$M2 == 100] <- 100
seed$EXP_FACT[seed$M2 == 10] <- 1000
seed$EXP_FACT[seed$M2 == 20] <- 500
seed$EXP_FACT[seed$M2 == 9] <- (10000/9)
# scaling up
seed$COUNT_ha <- seed$EXP_FACT * seed$TOTAL_COUNT
# combining seedling and dbh
seed <- seed %>%
group_by(SITE, TREAT, PLOT) %>%
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) # arranges species in the same order within plots
# also orders plots in same order within sites
# need to do to combine with dbh in a sec
# creating PIGL rows
# no white spruce at dbh height on plots, but need to add to combine with seedling file
test <- dens %>%
dplyr::select(SITE, TREAT, PLOT, EXP_FACT) %>% # need the dplyr because MASS package conflicts with select()
distinct() # creates file where each row is a plot, maintains expansion factors/site/treat
test$SPP <- as.factor("PIGL") # adds species
test$COUNT_ha <- 0 # adds zero count
test$COUNT_PLOT <- 0
test$DIV <- as.factor("c")
dens <- rbind(dens, test) # puts back into dbh file
dens <- dens %>%
group_by(SITE, TREAT, PLOT) %>% # same function as above # specifies order of species
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) %>%
rename(TREE_COUNT_PLOT = COUNT_PLOT, TREE_COUNT_HA = COUNT_ha,
TREE_EXP_FACT = EXP_FACT) # renames tree counts so we can combine with seedling
# combining files
dens$SEED_COUNT_PLOT <- seed$TOTAL_COUNT
dens$SEED_COUNT_HA <- seed$COUNT_ha
dens$SEED_EXP_FACT <- seed$EXP_FACT
# making sure number of fires is a factor
dens$TREAT <- as.factor(dens$TREAT)
# creating total count of both trees and seedlings
dens$COUNT_HA <- dens$TREE_COUNT_HA + dens$SEED_COUNT_HA
write.csv(dens, here("data/density.csv"), row.names = F)
dens <- read.csv(here("data/density.csv"))
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned sites used here
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(unique(dens$PLOT)) # don't worry that its 42, remember this doesn't include unburned sites
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to density file
dens$SLOPE <- attrib$SLOPE
View(dens)
View(attrib)
unique(attrib$plPLOT)
unique(attrib$PLOT)
unique(dens$PLOT)
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
View(attrib)
unique(attrib$PLOT)
unique(dens$PLOT)
# removing unburned sites
dens <- dens[dens$TREAT !=0,]
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned sites used here
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(unique(dens$PLOT)) # don't worry that its 42, remember this doesn't include unburned sites
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to density file
dens$SLOPE <- attrib$SLOPE
dens$ELEV <- attrib$ELEVATION
dens$SOLAR <- attrib$SOLAR
class(dens$TREAT)
# making sure number of fires is a factor
dens$TREAT <- as.factor(dens$TREAT)
dens$TREAT <- as.factor(dens$TREAT)
# Different way of subsetting, base R
CONIF_dens <- subset(dens, dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens <- CONIF_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use
hist(CONIF_dens$COUNT)									#check
View(CONIF_dens)
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D    <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D.nb, main="NB")
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
# parameters
summary(mC_D)
summary(mC_D_qp)
summary(mC_D.nb)
summary(mC_D_qp)
# parameters
summary(mC_D)
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  +  SOLAR + (TREAT*SITE),
link = log, data = CONIF_dens)
mC_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),
link = log, data = CONIF_dens)
mC_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + SOLAR + (TREAT*SITE),
link = log, data = CONIF_dens)
par(mfrow=c(5,4))
plot(mC_D.nb, main="NB")
par(mfrow=c(4,4))
plot(mC_D.nb, main="NB")
plot(mC_D.nb.slope, main="Slope")
plot(mC_D.nb.solar, main= "Solar")
plot(mC_D.nb.all, main = "All")
mC_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE  + scale(SLOPE) + (TREAT*SITE), link = log, data = CONIF_dens)
#solar not significant, but at least the values are sensible.
summary(mC_D.nb.slope)
summary(mC_D.nb)	#AIC -924
summary(mC_D.nb.slope)#AIC -926
#solar not significant, but at least the values are sensible.
summary(mC_D.nb.slope)
# Different way of subsetting, base R
DECID_dens <- subset(dens, dens$DIV == "d")
# the plots are duplicated with one entry per species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
temp2 <- temp[duplicated(temp[,1]),]										#merging and removing
temp3 <- temp2[duplicated(temp2[,1]),]        # have to loop through, since there's so many more species
temp4 <- temp3[duplicated(temp3[,1]),]        # absolutely sure there's a faster way to do this, just wanted to get it done
temp5 <- temp4[duplicated(temp4[,1]),]
DECID_dens_new <- temp5[duplicated(temp5[,1]),]
rm(temp,temp2, temp3, temp4, temp5, cnt, trt) 				# cleaning up workspace
DECID_dens <- DECID_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use							#back to original name so code below works
hist(DECID_dens$COUNT)									#check
dev.off()
hist(DECID_dens$COUNT)									#check
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
summary(mD_D)
summary(mD_D_qp)
summary(mD_D.nb)
summary(mD_D_qp)
# parameters
summary(mD_D)
mD_D.nb.all <- 	glm.nb(COUNT ~ as.factor(TREAT) + SITE + scale(SLOPE) + (TREAT*SITE),link = log,
data = DECID_dens)
summary(mD_D.nb.all)
mD_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  +  scale(SOLAR) + (TREAT*SITE),link = log, data = DECID_dens)
summary(mD_D.nb.solar)
mD_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),link = log, data = DECID_dens)
summary(mD_D.nb.slope)
mD_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + scale(SOLAR) + (TREAT*SITE),link = log,
data = DECID_dens)
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  +  scale(SOLAR) + (TREAT*SITE),link = log, data = DECID_dens)
mD_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),link = log, data = DECID_dens)
mD_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + scale(SOLAR) + (TREAT*SITE),link = log,
data = DECID_dens)
par(mfrow=c(4,4))
plot(mD_D.nb, main="NB")
plot(mD_D.nb.slope, main="Slope")
plot(mD_D.nb.solar, main= "Solar")
plot(mD_D.nb.all, main = "All")
#bringing in other covariates
#adding them into the glm above
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  +  scale(SOLAR) + (TREAT*SITE),link = log, data = DECID_dens)
mD_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),link = log, data = DECID_dens)
mD_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + scale(SOLAR) + (TREAT*SITE),link = log,
data = DECID_dens)
mD_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + SOLAR + (TREAT*SITE),link = log,
data = DECID_dens)
summary(mD_D.nb.all)
summary(mD_D.nb)
plot(mD_D.nb.solar, main= "Solar")
summary(mD_D.nb) # AIC 1087
summary(mD_D.nb.solar) # AIC 1078
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
ba.plot <- aggregate(DECID_BA$BA_ha, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
ba.trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_ba_new <- cbind(ba.plot, ba.trt[,2])						#combines
names(DECID_ba_new) <- c("PLOT","BA","TREAT")
ba.site <- cbind(DECID_BA$SITE,DECID_BA$PLOT)
temp <- as.data.frame(ba.site[!duplicated(ba.site[,2]),])
names(temp) <- c("SITE","PLOT")
DECID_BA <- merge(DECID_ba_new,temp,by="PLOT")	#double check all is well with the rows - right site/treatment/value
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in BA
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(3,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
plot(BA_logn, main = "Lognorm")
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
ba$TREAT <- as.factor(ba$TREAT)
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
plot(BA_logn, main = "Lognorm")
par(mfrow=c(1,4))
plot((DECID_BA$BA),residuals(mD_BA.log),main="log"); abline(h=0)
plot((DECID_BA$BA),residuals(mD_BA.ga), main="Gaussian"); abline(h=0)	#pretty clear Gaussian is not great.
plot((DECID_BA$BA),residuals(mD_BA.gamma), main="Gamma"); abline(h=0)
plot((DECID_BA$BA),residuals(BA_logn), main="Lognormal"); abline(h=0)
# parameters
summary(mD_BA.log)
summary(mD_BA.ga)
summary(mD_BA.gamma)
summary(BA_logn)
sqrt(mean(mD_BA.log$residuals^2))
sqrt(mean(mD_BA.ga$residuals^2))
sqrt(mean(mD_BA.gamma$residuals^2))
sqrt(mean(BA_logn$residuals^2))
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.all <- glm(BA  ~ TREAT + SITE + SLOPE + scale(SOLAR) + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.solar <- glm(BA  ~ TREAT + SITE + scale(SOLAR) + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.gamma, main= "Gamma")
plot(mD_BA.gamma.all, main="All covariates")
plot(mD_BA.gamma.slope, main="Slope")
plot(mD_BA.gamma.solar, main="Solar")
summary(mD_BA.gamma.solar)
summary(mD_BA.gamma.slope)
summary(mD_BA.gamma.all)
summary(mD_BA.gamma)
mC_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  + scale(SOLAR) + (TREAT*SITE), link = log, data = CONIF_dens)
summary(mC_D.nb.solar)
summary(mC_D.nb.slope) #AIC 926
summary(mC_D.nb)	#AIC 924
mC_D.nb.solar <- 	glm.nb(COUNT ~ TREAT + SITE  + SLOPE +  scale(SOLAR) + (TREAT*SITE), link = log, data = CONIF_dens)
summary(mC_D.nb.both)
mC_D.nb.both <- 	glm.nb(COUNT ~ TREAT + SITE  + SLOPE +  scale(SOLAR) + (TREAT*SITE), link = log, data = CONIF_dens)
summary(mC_D.nb.both)
mC_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + scale(SLOPE)  + (TREAT*SITE),link = log, data = CONIF_dens)
summary(mC_D.nb.slope) #AIC 926
mD_D.nb.all <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE + scale(SOLAR) + (TREAT*SITE),link = log,
data = DECID_dens)
summary(mD_D.nb.all) # AIC 1080
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(parameters)
library(logNormReg)
# getting values
dens <- read.csv(here("density.csv"))
# getting values
dens <- read.csv(here("data/density.csv"))
treat_dens <- dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
View(treat_dens)
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
50592/308
50592/22658
22658/11872
treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
11344/58
32126/11344
11344/59
32126/19742
# getting values
ba <- read_csv(here("ba.csv"))
treat_ba <- ba %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(BA_SUM), SE = se(BA_SUM))
treat_ba <- ba %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(BA_ha), SE = se(BA_ha))
treat_ba$SE <- round(treat_ba$SE, digits = 1)
treat_ba$AV <- round(treat_ba$AV, digits = 1)
treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
treat_ba %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
View(ba)
View(treat_ba)
View(ba)
treat_ba <- ba %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(BA_ha), SE = se(BA_ha))
treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
0.23342702/0.00974961
treat_ba %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
0.111337093/0.00533668
treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
0.1421507/0.00974961
treat_ba %>%
filter(SITE == "STEESE") %>%
filter(DIV == "d")
0.005383468/0.003336479/
0.005383468/0.003336479
0.007453202/0.003336479
treat_ba %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
0.02849430/0.01421507
