plot(mD_BA.gamma.all, main="All covariates")
plot(mD_BA.gamma.slope, main="Slope")
summary(mD_BA.gamma) # AIC 58.2
summary(mD_BA.gamma.slope) # AIC 58.8
class(ba$TREAT)
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
#choosing a distribution is often best done with an understanding of the relationship between variance and mean
#Gaussian has constant variance; gamma and lognormal do not.
#heteroskedastic
par(mfrow=c(1,4))
plot((DECID_BA$BA),residuals(mD_BA.log),main="log"); abline(h=0)
plot((DECID_BA$BA),residuals(mD_BA.ga), main="Gaussian"); abline(h=0)	#pretty clear Gaussian is not great.
plot((DECID_BA$BA),residuals(mD_BA.gamma), main="Gamma"); abline(h=0)
plot((DECID_BA$BA),residuals(BA_logn), main="Lognormal"); abline(h=0)
# parameters
summary(mD_BA.log)
summary(mD_BA.ga) # AIC 133
summary(mD_BA.gamma) # AIC 64
summary(mD_BA.gamma) # AIC 58
summary(BA_logn)
#Compare root mean squared error
sqrt(mean(mD_BA.log$residuals^2)) # 0.96
sqrt(mean(mD_BA.ga$residuals^2)) # 1.77
sqrt(mean(mD_BA.gamma$residuals^2)) # 0.79
sqrt(mean(BA_logn$residuals^2)) # 1.21
# adding in covariates
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.gamma, main= "Gamma")
plot(mD_BA.gamma.slope, main="Slope")
summary(mD_BA.gamma) # AIC 64
summary(mD_BA.gamma) # AIC 58
summary(mD_BA.gamma.slope) # AIC 62
summary(mD_BA.gamma) # AIC 58.2
summary(mD_D.nb) # AIC 1087
summary(mD_D.nb) # AIC 1087
summary(mC_D.nb) # AIC 924
summary(mC_D.nb) # AIC 924
summary(mD_D.nb) # AIC 1087
summary(mC_D.nb) # AIC 924
confint(mC_D.nb)
df(mC_D.nb)
dof(mC_D.nb)
summary(mD_D.nb) # AIC 1087
confint(mD_D.nb)
confint(mD_BA.gamma)
summary(mD_BA.gamma) # AIC 58.2
library(here)
library(cowplot)
library(dplyr)
theme_set(theme_cowplot())
theme_set(theme_cowplot())
library(cowplot)
theme_set(theme_cowplot())
org_depth <- read.csv(here("data/org_depth.csv"))
View(org_depth)
org_depth %>%
filter(TREATMENT == 0) %>%
summarise(mean(ORG_DEPTH))
org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
View(org_treat)
org_depth <- read.csv(here("data/org_depth.csv"))
org_treat <- org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREAT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREAT) %>%
summarise(AV_DEPTH = mean(ORG_DEPTH))
org_treat$AV_DEPTH <- round(org_treat$AV_DEPTH, digits = 2)
3.09/5.78
5.78/3.09
10.91/9.8
3.09/1.87
9.8/2.94
exposed_min <- read.csv(here("data/exposed_min.csv"))
expose_min_plot <- ggplot(exposed_min,
aes(x = factor(exposed_min$TREATMENT),
y = exposed_min$MINERAL,
fill = exposed_min$SITE)) +
geom_boxplot() +
scale_fill_manual(name = "Site Type",
values = c("#d9d9d9", "#ffffff"),
labels = c("Upland", "Lowland")) +
labs(title = "Exposed Mineral Soil",
x = "Number of Fires", y = "% of Mineral Soil Exposed") +
theme(plot.title = element_text(hjust = 0))
library(ggplot2)
library(ggplot2); library(cowplot)
library(cowplot)
library(cowplot) ; theme_set(theme_cowplot())
expose_min_plot <- ggplot(exposed_min,
aes(x = factor(exposed_min$TREATMENT),
y = exposed_min$MINERAL,
fill = exposed_min$SITE)) +
geom_boxplot() +
scale_fill_manual(name = "Site Type",
values = c("#d9d9d9", "#ffffff"),
labels = c("Upland", "Lowland")) +
labs(title = "Exposed Mineral Soil",
x = "Number of Fires", y = "% of Mineral Soil Exposed") +
theme(plot.title = element_text(hjust = 0))
expose_min_plot
library(ape)
library(spdep)
library(here)
library(tidyverse)
options(scipen = 9999)
# DALTON
# unburned
dens <- read.csv(here("data/density.csv"))
dalt <- dens[dens$SITE == "DALTON",]
dalt_unb <- dens %>%
filter(SITE == "DALTON") %>%
fliter(TREAT == 0)
dalt_unb <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# getting order of sites in dens
order <- as.vector(unique(dens$PLOT)) # don't worry that its 42, remember this doesn't include unburned sites
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
dens$LONG <- attrib$LONG
dalt_unb <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(dalt_unb$LONG, dalt_unb$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(both$COUNT_HA, regen.dist)
Moran.I(dalt_unb$COUNT_HA, regen.dist)
# once-burned
dalt1 <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(dalt1$COUNT_HA, regen.dist)
# twice-burned
dalt1 <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt2$LONG, dalt2$LAT)))
# twice-burned
dalt1 <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt2$LONG, dalt2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(dalt2$COUNT_HA, regen.dist)
# twice-burned
dalt2 <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt2$LONG, dalt2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(dalt2$COUNT_HA, regen.dist)
regen.dist <- as.matrix(dist(cbind(dalt3$LONG, dalt3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(dalt3$COUNT_HA, regen.dist)
dalt3 <- dens %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(dalt3$LONG, dalt3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(dalt3$COUNT_HA, regen.dist)
# STEESE
# unburned
stee0 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(stee0$LONG, stee0$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee0$COUNT_HA, regen.dist)
stee1 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(stee1$LONG, stee1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee1$COUNT_HA, regen.dist)
stee2 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(stee2$LONG, stee2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee2$COUNT_HA, regen.dist)
stee3 <- dens %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
regen.dist.inv[1:5, 1:5]
Moran.I(stee3$COUNT_HA, regen.dist)
ba <- read.csv(here("data/ba.csv"))
ba <- read.csv(here("ba.csv"))
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# getting order of sites in ba
order <- as.vector(unique(ba$PLOT))
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to baity file
ba$LAT <- attrib$LAT
ba <- read.csv(here("ba.csv"))
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
dens <- read.csv(here("data/density.csv"))
View(dens)
View(ba)
spp_ba <- %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(BA = sum(BA_ha))
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT, SPP) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha)) %>%
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
spp_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
View(spp_ba)
unique(plot_ba$PLOT)
unique(dens$PLOT)
levels(plot_ba$PLOT)
levels(attrib$PLOT)
ba <- read.csv(here("ba.csv"))
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
ba <- read.csv(here("ba.csv"))
plot_ba <- ba %>%
group_by(SITE,TREAT, PLOT) %>%
summarise(BA = sum(BA_ha))
rm(spp_ba)
# bringing in latitude and longitude
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
View(plot_ba)
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 1)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# getting order of sites in ba
order <- as.vector(unique(ba$PLOT))
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as baity file
slice(rep(1:n(), each = 1)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to baity file
ba$LAT <- attrib$LAT
ba$LONG <- attrib$LONG
plot_ba$LONG <- attrib$LONG
# adding in attributes to baity file
plot_ba$LAT <- attrib$LAT
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$dalt1_DIV, regen.dist)
Moran.I(dalt1$BA, regen.dist)
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt1 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt2 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt1$LONG, dalt1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt1$BA, regen.dist)
dalt2 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(dalt2$LONG, dalt2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt2$BA, regen.dist)
dalt3 <- plot_ba %>%
filter(SITE == "DALTON") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(dalt3$LONG, dalt3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(dalt3$BA, regen.dist)
stee0 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 0)
regen.dist <- as.matrix(dist(cbind(stee0$LONG, stee0$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee0$BA, regen.dist)
stee1 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 1)
regen.dist <- as.matrix(dist(cbind(stee1$LONG, stee1$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee1$BA, regen.dist)
stee2 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 2)
regen.dist <- as.matrix(dist(cbind(stee2$LONG, stee2$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee2$BA, regen.dist)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee3$BA, regen.dist)
stee3 <- plot_ba %>%
filter(SITE == "STEESE") %>%
filter(TREAT == 3)
regen.dist <- as.matrix(dist(cbind(stee3$LONG, stee3$LAT)))
regen.dist.inv <- 1/regen.dist
diag(regen.dist.inv) <-0
Moran.I(stee3$BA, regen.dist)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(logNormReg)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
ba %>% group_by(SITE,PLOT) %>% summarise(sum(BA))
ba %>% group_by(SITE,PLOT) %>% summarise(sum(BA_ha))
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
DECID_BA <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
```
View(ba)
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
DECID_BA <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
# adding in covariates
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
summary(mD_BA.gamma) # AIC 58.2
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
summary(mD_BA.gamma.slope) # AIC 58.8
dens <- read.csv(here("data/density.csv"))
treat_dens <- dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
se <- function(x) sqrt(var(x)/length(x))
library(sjPlot)
library(MASS)
library(logNormReg)
dens <- read.csv(here("data/density.csv"))
treat_dens <- dens %>%
group_by(SITE, TREAT, DIV) %>%
summarise(AV = mean(COUNT_HA), SE = se(COUNT_HA))
treat_dens$SE <- round(treat_dens$SE, digits = 0)
treat_dens$AV <- round(treat_dens$AV, digits = 0)
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "c")
stee_con_dens <- treat_dens %>%
filter(SITE == "STEESE") %>%
filter(DIV == "c")
treat_dens %>%
filter(SITE == "DALTON") %>%
filter(DIV == "d")
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
View(ba)
