# all$CONIF_COUNT_HA_log <- log(all$CONIF_COUNT_HA + 1)
mC_D <- glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
# residuals
plot(mC_D)
# parameters
summary(mC_D); # model_parameters(mC_D)
# testing quasi poisson
mC_D_qp <- glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson, data = CONIF_dens)
# residuals
plot(mC_D_qp)
# parameters
summary(mC_D_qp); # model_parameters(mC_D_qp)
# deciduous density
DECID_dens <- species_dens %>%
filter(DIV == "d")
mD_D <- glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
# residuals
plot(mD_D)
summary(mD_D); # model_parameters(mD_D)
# TEST deciduous density
mD_D <- glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson, data = DECID_dens)
# residuals
plot(mD_D)
# quasi
mC_BA <- glm(BA ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_BA)
# residuals
plot(mC_BA)
# parameters
summary(mC_BA); #model_parameters(mC_BA)
mC_D_qp <- glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
plot(mC_D_qp)
# parameters
summary(mC_D_qp); # model_parameters(mC_D_qp)
install.packages(pscl)
install.packages('pscl')
# bringing in data
species_dens <- read.csv(("species_dens.csv"))
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
species_dens <- species_dens[species_dens$TREAT !=0,]
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
species_dens[1:3,]
#Different way of subsetting, base R
CONIF_dens <- subset(species_dens, species_dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens_new <- CONIF_dens_new[,1:4]						#remove extra columns
names(CONIF_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
CONIF_dens <- CONIF_dens_new								#back to original name so code below works
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
summary(mC_D.nb)
plot_model(mC_D.nb, show.values = T, show.p = T) # effect sizes
#note the prediction vs. observed isn't great, but that's not the point here
plot(predict(mC_D.nb, type="response",se.fit=T)$fit,CONIF_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
plot(predict(mC_D.nb, type="response",se.fit=T)$fit, predict(mC_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
#Different way of subsetting, base R
DECID_dens <- subset(species_dens, species_dens$DIV == "d")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
DECID_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
DECID_dens_new <- DECID_dens_new[,1:4]						#remove extra columns
names(DECID_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
DECID_dens <- DECID_dens_new								#back to original name so code below works
hist(DECID_dens$COUNT)									#check
dev.off()
# residuals
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
summary(mD_D.nb)
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,DECID_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
dev.off()
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,DECID_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,
predict(mD_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,
predict(mD_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
plot(predict(mC_D.nb, type="response",se.fit=T)$fit,CONIF_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
#the model doesn't do bad at predicting areas with zero trees (treatment effect) are zero, it's the variability
#in the regen where there is regen (treatments 1 and 2 primarily) that must be explained by other factors.
#That's clear from this prediction plot and where the major errors are, but also in the standard errors.
plot(predict(mC_D.nb, type="response",se.fit=T)$fit, predict(mC_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
abline(0,1, col="red")
abline(0,1, col="red")
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,
predict(mD_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
abline(0,1, col="red")
abline(0,1, col="red")
CONIF_BA <- subset(ba, ba$DIV == "c")
mC_BA <- lm(log(BA) ~ TREAT + SITE + (TREAT*SITE), data = CONIF_BA)
# residuals
plot(mC_BA)
# parameters
summary(mC_BA); #model_parameters(mC_BA)
View(DECID_BA)
View(CONIF_BA)
View(DECID_BA)
#Different way of subsetting, base R
DECID_BA <- subset(ba, ba$DIV == "d")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(DECID_BA$BA, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
DECID_BA_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_BA_new, y=DECID_BA, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
DECID_BA_new <- temp[duplicated(temp[,1]),]					#merging and removing
DECID_BA_new <- DECID_BA_new[,1:4]						#remove extra columns
names(DECID_BA_new) <- c("PLOT","BA","TREAT", "SITE")			#get names back in there
DECID_BA <- DECID_BA_new								#back to original name so code below works
hist(DECID_BA$COUNT)
hist(DECID_BA$BA)
mD_BA <- lm(BA ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
# residuals
plot(mD_BA)
# residuals
plot(mD_BA)
# parameters
summary(mD_BA); # model_parameters(mD_BA)
View(DECID_BA)
View(CONIF_BA)
View(DECID_dens)
View(CONIF_dens)
View(CONIF_dens_new)
View(CONIF_dens)
View(DECID_dens)
View(DECID_dens_new)
#Different way of subsetting, base R
DECID_dens <- subset(species_dens, species_dens$DIV == "d")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
View(cnt)
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
View(trt)
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
View(DECID_dens_new)
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
view(temp)
DECID_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
View(DECID_dens_new)
# bringing in data
species_dens <- read.csv(("species_dens.csv")); species_dens <- species_dens[species_dens$TREAT !=0,] # removing unburned sites
#Different way of subsetting, base R
CONIF_dens <- subset(species_dens, species_dens$DIV == "c")
View(CONIF_dens)
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
View(cnt)
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
View(trt)
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
View(cnt)
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
View(CONIF_dens_new)
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
View(temp)
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens_new <- CONIF_dens_new[,1:4]						#remove extra columns
names(CONIF_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
CONIF_dens <- CONIF_dens_new								#back to original name so code below works
hist(CONIF_dens$COUNT)									#check
#Different way of subsetting, base R
DECID_dens <- subset(species_dens, species_dens$DIV == "d")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
DECID_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
DECID_dens_new <- DECID_dens_new[,1:4]						#remove extra columns
names(DECID_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
DECID_dens <- DECID_dens_new
View(DECID_dens)
temp[duplicated(temp[,1]),]
head(temp[duplicated(temp[,1]),])
temp[,1]
head(temp[,1])
head(temp[duplicated(temp[,1]),])
View(DECID_dens_new)
View(species_dens)
head(temp[duplicated(temp[,1]),])
test <- temp[duplicated(temp[,1]),]
head(test[duplicated(test[,1]),]
)
temp2 <- temp[duplicated(temp[,1]),]					#merging and removing
temp3 <- temp2[duplicated(temp2[,1]),]
head(temp3)
temp4 <- temp3[duplicated(temp3[,1]),]
head(temp4)
temp5 <- temp4[duplicated(temp4[,1]),]
head(temp5)
temp6 <- temp5[duplicated(temp5[,1]),]
head(temp6)
DECID_dens_new <- temp5[duplicated(temp5[,1]),]
DECID_dens_new <- DECID_dens_new[,1:4]						#remove extra columns
View(DECID_dens_new)
View(DECID_dens)
names(DECID_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
DECID_dens <- DECID_dens_new								#back to original name so code below works
hist(DECID_dens$COUNT)									#check
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
# residuals
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
dev.off()
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
dev.off()
plot(mD_D.nb, main="NB")
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
# residuals
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
summary(mD_D.nb)
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,DECID_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
dev.off()
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,DECID_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,
predict(mD_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
abline(0,1, col="red")
model_parameters(mC_D.nb)
library(tidyverse)
library(sjPlot)
library(MASS)
library(here)
library(parameters)
# library(stats)
library(cowplot); theme_set(theme_cowplot())
# bringing in data
species_dens <- read.csv(("species_dens.csv"))
# removing unburned sites
species_dens <- species_dens[species_dens$TREAT !=0,]
# looking at format of data, first three rows
species_dens[1:3,]
################################################
## conifer density
##
#Different way of subsetting, base R
CONIF_dens <- subset(species_dens, species_dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens_new <- CONIF_dens_new[,1:4]						#remove extra columns
names(CONIF_dens_new) <- c("PLOT","COUNT","TREAT", "SITE")			#get names back in there
CONIF_dens <- CONIF_dens_new								#back to original name so code below works
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
# parameters
summary(mC_D); # model_parameters(mC_D)
summary(mC_D.nb)
summary(mC_D_qp)
model_parameters(mC_D.nb)
rm(temp2, temp3, temp4, temp5) # cleaning up workspace
rm(temp6)
rm(temp2, temp3, temp4, temp5, crt, trt) # cleaning up workspace
rm(temp,temp2, temp3, temp4, temp5, crt, trt) # cleaning up workspace
rm(test)
rm(cnt)
model_parameters(mD_D.nb)
summary(mD_D.nb)
model_parameters(mC_D.nb)
d
model_parameters(mD_D.nb)
library(tidyverse)
library(sjPlot)
library(MASS)
library(here)
# library(parameters)
# library(stats)
library(cowplot); theme_set(theme_cowplot())
# options(scipen = 9999)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
CONIF_BA <- subset(ba, ba$DIV == "c")
mC_BA <- lm(log(BA) ~ TREAT + SITE + (TREAT*SITE), data = CONIF_BA)
# residuals
plot(mC_BA)
# parameters
summary(mC_BA); #model_parameters(mC_BA)
View(CONIF_BA)
#Different way of subsetting, base R
DECID_BA <- subset(ba, ba$DIV == "d")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(DECID_BA$BA, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
DECID_BA_new <- cbind(cnt, trt[,2])						#combines
View(cnt)
View(trt)
View(DECID_BA_new)
temp <- merge(x=DECID_BA_new, y=DECID_BA, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
DECID_BA_new <- temp[duplicated(temp[,1]),]					#merging and removing
View(DECID_BA_new)
#Different way of subsetting, base R
CONIF_BA <- subset(ba, ba$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_BA$BA, list(CONIF_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_BA$TREAT, list(CONIF_BA$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_BA_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_BA_new, y=CONIF_BA, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_BA_new <- temp[duplicated(temp[,1]),]					#merging and removing
View(CONIF_BA_new)
View(ba)
# bringing in data
ba <- read.csv(here("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
#####################################################
## conifer basal area
##
test <- ba %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA_sum = sum(BA))
View(test)
#####################################################
## conifer basal area
##
test <- ba %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA_sum = sum(BA)) %>%
ungroup() %>%
complete(SITE,TREAT, PLOT, DIV, fill = list(BA_sum = 0))
warnings()
View(test)
#####################################################
## conifer basal area
##
test <- ba %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA_sum = sum(BA)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA_sum = 0))
#####################################################
## conifer basal area
##
test <- ba %>%
filter(DIV == "c") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA_sum = sum(BA)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA_sum = 0))
hist(test$BA_sum)
plot(test$BA_sum)
plot(test$BA_sum, test$TREAT)
plot(test$TREAT,test$BA_sum)
#####################################################
## conifer basal area
##
CONIF_BA <- ba %>%
filter(DIV == "c") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA_sum = sum(BA)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA_sum = 0))
plot(test$TREAT,test$BA_sum)
mC_BA <- lm(log(BA) ~ TREAT + SITE + (TREAT*SITE), data = CONIF_BA)
mC_BA <- lm(log(BA_sum) ~ TREAT + SITE + (TREAT*SITE), data = CONIF_BA)
# residuals
plot(mC_BA)
# parameters
summary(mC_BA); #model_parameters(mC_BA)
mC_BA <- lm(log(BA_sum + 1) ~ TREAT + SITE + (TREAT*SITE), data = CONIF_BA)
# residuals
plot(mC_BA)
# parameters
summary(mC_BA); #model_parameters(mC_BA)
#################################################
## deciduous basal area
##
DECID_BA <- ba %>%
filter(DIV == "d") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA_sum = sum(BA)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA_sum = 0))
mD_BA <- lm(log(BA) ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
mD_BA <- lm(log(BA_sum) ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
mD_BA <- lm(log(BA_sum + 1) ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
# residuals
plot(mD_BA)
# residuals
plot(mD_BA)
# parameters
summary(mD_BA); # model_parameters(mD_BA)
mD_BA <- glm(BA_sum  ~ TREAT + SITE + (TREAT*SITE), family = guassian(link = "identity"), data = DECID_BA)
library(MASS)
mD_BA <- glm(BA_sum  ~ TREAT + SITE + (TREAT*SITE), family = guassian(link = "identity"), data = DECID_BA)
mD_BA <- glm(BA_sum  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "identity"), data = DECID_BA)
# residuals
plot(mD_BA)
# parameters
summary(mD_BA); # model_parameters(mD_BA)
mD_BA.ga <- glm(BA_sum  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "identity"), data = DECID_BA)
mD_BA.ig <- glm(BA_sum  ~ TREAT + SITE + (TREAT*SITE), family = inverse.gaussian(link = "1/mu^2"), data = DECID_BA)
par(mfrow=c(2,4))
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.ig, main = "Inverse Guassian")
View(DECID_BA)
ba$BA_ha <- ba$BA * 50
#################################################
## deciduous basal area
##
DECID_BA <- ba %>%
filter(DIV == "d") %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(BA = sum(BA_ha)) %>%
ungroup() %>%
complete(SITE, TREAT, PLOT, fill = list(BA = 0))
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "identity"), data = DECID_BA)
mD_BA.ig <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = inverse.gaussian(link = "1/mu^2"), data = DECID_BA)
plot(mD_BA.ga, main="Guassian")
par(mfrow=c(2,4))
plot(mD_BA.ga, main="Guassian")
hist(DECID_BA$BA)
hist(DECID_BA$BA)
dev.off()
hist(DECID_BA$BA)
which(DECID_BA$BA)
which(DECID_BA$BA > 600)
View(DECID_BA)
species_dens <- read.csv(here("species_dens.csv"), stringsAsFactors = F)
species_dens %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = COUNT_HA, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)  + ylim(0, 200000) +
labs(x = "Number of Fires", y = "Stems per Hectare",
title = "Density of Regeneration in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
species_dens <- read.csv(here("species_dens.csv"), stringsAsFactors = F)
library(tidyverse)
library(cowplot)
library(here)
theme_set(theme_cowplot())
options(scipen = 9999)
species_dens <- read.csv(here("species_dens.csv"), stringsAsFactors = F)
View(species_dens)
pecies_dens$SITE[species_dens$SITE == "DALTON"] <- "Upland"
species_dens$SITE[species_dens$SITE == "STEESE"] <- "Lowland"
species_dens$SITE[species_dens$SITE == "DALTON"] <- "Upland"
species_dens$SITE[species_dens$SITE == "STEESE"] <- "Lowland"
species_dens %>%
filter(TREAT != 0) %>%
ggplot(aes(x = as.factor(TREAT), y = COUNT_HA, fill = DIV)) +
geom_boxplot() + facet_wrap(~SITE)  + ylim(0, 200000) +
labs(x = "Number of Fires", y = "Stems per Hectare",
title = "Density of Regeneration in Burned Plots") +
scale_fill_manual(values = c("#f0f0f0", "#bdbdbd"),
name = "Division",
labels = c("Conifer", "Deciduous"))
