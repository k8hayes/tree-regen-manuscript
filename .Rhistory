seed$EXP_FACT <- NA
seed$EXP_FACT[seed$M2 == 100] <- 100
seed$EXP_FACT[seed$M2 == 10] <- 1000
seed$EXP_FACT[seed$M2 == 20] <- 500
seed$EXP_FACT[seed$M2 == 9] <- (10000/9)
# scaling up
seed$COUNT_ha <- seed$EXP_FACT * seed$TOTAL_COUNT
# combining seedling and dbh
seed <- seed %>%
group_by(SITE, TREAT, PLOT) %>%
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) # arranges species in the same order within plots
# creating PIGL rows
# no white spruce at dbh height on plots, but need to add to combine with seedling file
test <- dens %>%
dplyr::select(SITE, TREAT, PLOT, EXP_FACT) %>% # need the dplyr because MASS package conflicts with select()
distinct() # creates file where each row is a plot, maintains expansion factors/site/treat
View(seed)
dbh <- read.csv(here("data/dbh.csv"))
dbh$TREAT <- as.factor(dbh$TREAT)
# dropping dead trees
dbh <- dbh %>%
filter(CANOPY > 0)
# summing according to species
dens <- dbh %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(COUNT_PLOT = n()) %>%
ungroup() %>%
group_by(SITE, TREAT,PLOT) %>%
complete( SPP, fill = list(COUNT_PLOT = 0)) # adds zero-counts back in for species
# adding divisions back in
dens$DIV <- NA
dens$DIV[dens$SPP == "PIME"] <- "c"
dens$DIV[dens$SPP == "BENE"] <- "d"
dens$DIV[dens$SPP == "POTR"] <- "d"
dens$DIV[dens$SPP == "POBA"] <- "d"
dens$DIV[dens$SPP == "SALIX"] <- "d"
dens$DIV[dens$SPP == "ARCTO"] <- "d"
dens$DIV[dens$SPP == "ALCR"] <- "d"
dens$DIV <- as.factor(dens$DIV)
# adding expansion factor back
test <- dbh %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(EXP_FACT = max(EXP_FACT)) %>%
slice(rep(1:n(), each = 7)) %>% # 7 species at each plot, so each plot is 7 rows
ungroup()
dens$EXP_FACT <- test$EXP_FACT # adding expansion factors back in
# scaling up
dens$COUNT_ha <- dens$COUNT_PLOT * dens$EXP_FACT
seed <- read.csv(here("data/seedling_count_raw.csv"))
# adding expansion factors
seed$EXP_FACT <- NA
seed$EXP_FACT[seed$M2 == 100] <- 100
seed$EXP_FACT[seed$M2 == 10] <- 1000
seed$EXP_FACT[seed$M2 == 20] <- 500
seed$EXP_FACT[seed$M2 == 9] <- (10000/9)
# scaling up
seed$COUNT_ha <- seed$EXP_FACT * seed$TOTAL_COUNT
# combining seedling and dbh
seed <- seed %>%
group_by(SITE, TREAT, PLOT) %>%
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) # arranges species in the same order within plots
# also orders plots in same order within sites
# need to do to combine with dbh in a sec
# creating PIGL rows
# no white spruce at dbh height on plots, but need to add to combine with seedling file
test <- dens %>%
dplyr::select(SITE, TREAT, PLOT, EXP_FACT) %>% # need the dplyr because MASS package conflicts with select()
distinct() # creates file where each row is a plot, maintains expansion factors/site/treat
test$SPP <- as.factor("PIGL") # adds species
test$COUNT_ha <- 0 # adds zero count
test$COUNT_PLOT <- 0
test$DIV <- as.factor("c")
class(test$TREAT)
dens <- rbind(dens, test) # puts back into dbh file
dens <- dens %>%
group_by(SITE, TREAT, PLOT) %>% # same function as above # specifies order of species
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) %>%
rename(TREE_COUNT_PLOT = COUNT_PLOT, TREE_COUNT_HA = COUNT_ha,
TREE_EXP_FACT = EXP_FACT) # renames tree counts so we can combine with seedling
# combining files
dens$SEED_COUNT_PLOT <- seed$TOTAL_COUNT
dens$SEED_COUNT_HA <- seed$COUNT_ha
dens$SEED_EXP_FACT <- seed$EXP_FACT
# making sure number of fires is a factor
dens$TREAT <- as.factor(dens$TREAT)
# creating total count of both trees and seedlings
dens$COUNT_HA <- dens$TREE_COUNT_HA + dens$SEED_COUNT_HA
#  write.csv(dens, here("data/density.csv"), row.names = F)
View(dens)
se <- function(x) sqrt(var(x)/length(x))
dbh <- read.csv(here("data/dbh.csv"))
dbh$TREAT <- as.factor(dbh$TREAT)
# dropping dead trees
dbh <- dbh %>%
filter(CANOPY > 0)
# summing according to species
dens <- dbh %>%
group_by(SITE, TREAT, PLOT, SPP) %>%
summarise(COUNT_PLOT = n()) %>%
ungroup() %>%
group_by(SITE, TREAT,PLOT) %>%
complete( SPP, fill = list(COUNT_PLOT = 0)) # adds zero-counts back in for species
# adding divisions back in
dens$DIV <- NA
dens$DIV[dens$SPP == "PIME"] <- "c"
dens$DIV[dens$SPP == "BENE"] <- "d"
dens$DIV[dens$SPP == "POTR"] <- "d"
dens$DIV[dens$SPP == "POBA"] <- "d"
dens$DIV[dens$SPP == "SALIX"] <- "d"
dens$DIV[dens$SPP == "ARCTO"] <- "d"
dens$DIV[dens$SPP == "ALCR"] <- "d"
dens$DIV <- as.factor(dens$DIV)
# adding expansion factor back
test <- dbh %>%
group_by(SITE, TREAT, PLOT) %>%
summarise(EXP_FACT = max(EXP_FACT)) %>%
slice(rep(1:n(), each = 7)) %>% # 7 species at each plot, so each plot is 7 rows
ungroup()
dens$EXP_FACT <- test$EXP_FACT # adding expansion factors back in
# scaling up
dens$COUNT_ha <- dens$COUNT_PLOT * dens$EXP_FACT
seed <- read.csv(here("data/seedling_count_raw.csv"))
# adding expansion factors
seed$EXP_FACT <- NA
seed$EXP_FACT[seed$M2 == 100] <- 100
seed$EXP_FACT[seed$M2 == 10] <- 1000
seed$EXP_FACT[seed$M2 == 20] <- 500
seed$EXP_FACT[seed$M2 == 9] <- (10000/9)
# scaling up
seed$COUNT_ha <- seed$EXP_FACT * seed$TOTAL_COUNT
# combining seedling and dbh
seed <- seed %>%
group_by(SITE, TREAT, PLOT) %>%
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) # arranges species in the same order within plots
# also orders plots in same order within sites
# need to do to combine with dbh in a sec
# creating PIGL rows
# no white spruce at dbh height on plots, but need to add to combine with seedling file
test <- dens %>%
dplyr::select(SITE, TREAT, PLOT, EXP_FACT) %>% # need the dplyr because MASS package conflicts with select()
distinct() # creates file where each row is a plot, maintains expansion factors/site/treat
test$SPP <- as.factor("PIGL") # adds species
test$COUNT_ha <- 0 # adds zero count
test$COUNT_PLOT <- 0
test$DIV <- as.factor("c")
class(test$TREAT)
dens <- rbind(dens, test) # puts back into dbh file
dens <- dens %>%
group_by(SITE, TREAT, PLOT) %>% # same function as above # specifies order of species
arrange(match(SPP, c("ALCR", "ARCTO", "BENE", "POBA", "POTR", "SALIX", "PIGL", "PIME")),
.by_group = T) %>%
rename(TREE_COUNT_PLOT = COUNT_PLOT, TREE_COUNT_HA = COUNT_ha,
TREE_EXP_FACT = EXP_FACT) # renames tree counts so we can combine with seedling
# combining files
dens$SEED_COUNT_PLOT <- seed$TOTAL_COUNT
dens$SEED_COUNT_HA <- seed$COUNT_ha
dens$SEED_EXP_FACT <- seed$EXP_FACT
# making sure number of fires is a factor
dens$TREAT <- as.factor(dens$TREAT)
# creating total count of both trees and seedlings
dens$COUNT_HA <- dens$TREE_COUNT_HA + dens$SEED_COUNT_HA
#  write.csv(dens, here("data/density.csv"), row.names = F)
View(dens)
# removing unburned sites
dens <- dens[dens$TREAT !=0,]
dens$TREAT <- as.factor(dens$TREAT)
# looking at format of data, first three rows
dens[1:3,]
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned sites used here
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(unique(dens$PLOT)) # don't worry that its 42, remember this doesn't include unburned sites
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order)) %>% # matches the same order of plots as density file
slice(rep(1:n(), each = 8)) # replicates each value by 8, since there's 8 rows per plot (8 species)
# adding in attributes to density file
dens$SLOPE <- attrib$SLOPE
dens$ELEV <- attrib$ELEVATION
dens$SOLAR <- attrib$SOLAR
View(dens)
dens$TREAT <- as.factor(dens$TREAT)
# Different way of subsetting, base R
CONIF_dens <- subset(dens, dens$DIV == "c")
#the plots are duplicated with one entry per conifer species, so this reduces it to one value per plot
cnt <- aggregate(CONIF_dens$COUNT_HA, list(CONIF_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(CONIF_dens$TREAT, list(CONIF_dens$PLOT), FUN = mean)	#gets the treatment number (mean works because they are the same
CONIF_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=CONIF_dens_new, y=CONIF_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
CONIF_dens_new <- temp[duplicated(temp[,1]),]					#merging and removing
CONIF_dens <- CONIF_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use
hist(CONIF_dens$COUNT)									#check
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D    <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = CONIF_dens)
mC_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = CONIF_dens)
# residuals
par(mfrow=c(3,4))
plot(mC_D, main="Poisson")
plot(mC_D_qp, main="Quasi-poisson")
plot(mC_D.nb, main="NB")
# parameters
summary(mC_D)
summary(mC_D_qp)
summary(mC_D.nb) # AIC 931
#note the prediction vs. observed isn't great, but that's not the point here
plot(predict(mC_D.nb, type="response",se.fit=T)$fit,CONIF_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
#note the prediction vs. observed isn't great, but that's not the point here
dev.off()
plot(predict(mC_D.nb, type="response",se.fit=T)$fit,CONIF_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")								#one to one line
plot(predict(mC_D.nb, type="response",se.fit=T)$fit, predict(mC_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
abline(0,1, col="red")
#to do so, adding them into the glm above, but then check the diagnostics again of course
mC_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = CONIF_dens)
mC_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),
link = log, data = CONIF_dens)
par(mfrow=c(2,4))
plot(mC_D.nb, main="NB")
plot(mC_D.nb.slope, main="Slope")
summary(mC_D.nb) # AIC 931
summary(mC_D.nb.slope) # AIC 933
summary(mC_D.nb) # AIC 931
summary(mC_D.nb) # AIC 931
summary(mC_D.nb.slope) # AIC 933
# Different way of subsetting, base R
DECID_dens <- subset(dens, dens$DIV == "d")
# the plots are duplicated with one entry per species, so this reduces it to one value per plot
cnt <- aggregate(DECID_dens$COUNT_HA, list(DECID_dens$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
trt <- aggregate(DECID_dens$TREAT, list(DECID_dens$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_dens_new <- cbind(cnt, trt[,2])						#combines
temp <- merge(x=DECID_dens_new, y=DECID_dens, by.x="Group.1", by.y="PLOT", all.x=F, all.y=F)	#adding in the site in a clumsy way but it was quick
temp2 <- temp[duplicated(temp[,1]),]										#merging and removing
temp3 <- temp2[duplicated(temp2[,1]),]        # have to loop through, since there's so many more species
temp4 <- temp3[duplicated(temp3[,1]),]        # absolutely sure there's a faster way to do this, just wanted to get it done
temp5 <- temp4[duplicated(temp4[,1]),]
DECID_dens_new <- temp5[duplicated(temp5[,1]),]
rm(temp,temp2, temp3, temp4, temp5, cnt, trt) 				# cleaning up workspace
DECID_dens <- DECID_dens_new %>%
rename(PLOT = Group.1, COUNT = x) %>% # renaming columns
dplyr::select(SITE, TREAT, PLOT, COUNT, SLOPE, ELEV, SOLAR) # selecting only the things we'll use							#back to original name so code below works
dev.off()
hist(DECID_dens$COUNT)									#check
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D_qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
# residuals
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D_qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
# parameters
summary(mD_D)
summary(mD_D_qp)
summary(mD_D.nb) # AIC 1085
dev.off()
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,DECID_dens$COUNT)	#plots the exponentiated prediction back
abline(0,1, col="red")
plot(predict(mD_D.nb, type="response",se.fit=T)$fit,
predict(mD_D.nb, type="response",se.fit=T)$se.fit, ylab="SE", xlab="Prediction")
#bringing in other covariates
#adding them into the glm above
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D.nb.slope <- 	glm.nb(COUNT ~ TREAT + SITE + SLOPE  + (TREAT*SITE),link = log, data = DECID_dens)
par(mfrow=c(5,4))
plot(mD_D.nb, main="NB")
dev.off()
par(mfrow=c(5,4))
plot(mD_D.nb, main="NB")
plot(mD_D.nb.slope, main="Slope")
sqrt(mean(mD_D.nb$residuals^2))
sqrt(mean(mD_D$residuals^2))
sqrt(mean(mD_D.qp$residuals^2))
mD_D.qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
sqrt(mean(mD_D.qp$residuals^2))
mD_D.nb <- 	glm.nb(COUNT ~ TREAT + SITE + (TREAT*SITE), link = log, data = DECID_dens)
mD_D <- 		glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = poisson(link = "log"), data = DECID_dens)
mD_D.qp <- 	glm(COUNT ~ TREAT + SITE + (TREAT*SITE), family = quasipoisson(link = "log"), data = DECID_dens)
# residuals
par(mfrow=c(3,4))
plot(mD_D, main="Poisson")
plot(mD_D.qp, main="Quasi-poisson")
plot(mD_D.nb, main="NB")
sqrt(mean(mD_D.nb$residuals^2))
sqrt(mean(mD_D$residuals^2))
sqrt(mean(mD_D.qp$residuals^2))
summary(mD_D.nb) # AIC 1085
summary(mD_D.nb.slope) # AIC 1087
summary(mD_D.nb) # AIC 1087
summary(mD_D.nb.slope) # AIC 1087
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
test <- DECID_BA %>%
group_by(SITE, TREAT, PLOT, DIV) %>%
summarise(BA = sum(BA_ha))
DECID_ba_new <- cbind(ba.plot, ba.trt[,2])						#combines
names(DECID_ba_new) <- c("PLOT","BA","TREAT")
View(test)
#histogram
hist(test$BA)
dev.off()
#histogram
hist(test$BA)
# bringing in data
ba <- read.csv(("ba.csv"), stringsAsFactors = F)
# removing unburned sites
ba <- ba[ba$TREAT != 0,]
# looking at format of data, first three rows
ba[1:3,]
########################
## deciduous basal area
DECID_BA <- subset(ba, ba$DIV == "d")
DECID_BA$QUAD[DECID_BA$QUAD == 2] <- 50	#assuming a plot is 1/25 of a ha, so half a plot is 1/50 of a ha.
DECID_BA$QUAD[DECID_BA$QUAD == 1] <- 100
DECID_BA$QUAD[DECID_BA$QUAD == .1] <- 1000
DECID_BA$QUAD[DECID_BA$QUAD == .2] <- 500
#calc basal area
DECID_BA$BA <- (pi * (DECID_BA$DBH/2)^2)/10000	#convert to ba and cm2 to m2. Just pi*r2
DECID_BA$BA_ha <- DECID_BA$BA * DECID_BA$QUAD		#multiply by expansion factor
#a single line, does the same thing (calculates basal area and scales by expansion factor):
#DECID_BA$BA_ha <- DECID_BA$DBH^2*0.00007854*DECID_BA$QUAD  #note this does the same thing, just simplified algebraically
ba.plot <- aggregate(DECID_BA$BA_ha, list(DECID_BA$PLOT), FUN = sum)  	#adds up the count per ha for each row within a plot
ba.trt <- aggregate(DECID_BA$TREAT, list(DECID_BA$PLOT), FUN = mean)		#gets the treatment number (mean works because they are the same
DECID_ba_new <- cbind(ba.plot, ba.trt[,2])						#combines
names(DECID_ba_new) <- c("PLOT","BA","TREAT")
ba.site <- cbind(DECID_BA$SITE,DECID_BA$PLOT)
temp <- as.data.frame(ba.site[!duplicated(ba.site[,2]),])
names(temp) <- c("SITE","PLOT")
DECID_BA <- merge(DECID_ba_new,temp,by="PLOT")	#double check all is well with the rows - right site/treatment/value
#histogram
hist(DECID_BA$BA)
# pulling in site attribute variables
attrib <- read.csv(here("data/site_attrib.csv"))
# no unburned
attrib <-attrib[attrib$TREAT != 0,]
# getting order of sites in dens
order <- as.vector(DECID_BA$PLOT) # don't worry that its 42, remember this doesnt include unburned
attrib <- attrib %>%
group_by(SITE, TREAT) %>%
arrange(match(PLOT,order))
# adding in attributes to density file
DECID_BA$SLOPE <- attrib$SLOPE
DECID_BA$ELEV <- attrib$ELEVATION
DECID_BA$SOLAR <- attrib$SOLAR
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
# parameters
summary(mD_BA.log)
summary(mD_BA.ga) # AIC 133
summary(mD_BA.gamma) # AIC 58
summary(mD_BA.gamma) # AIC 64
summary(BA_logn)
sqrt(mean(mD_BA.log$residuals^2)) # 0.80
sqrt(mean(mD_BA.ga$residuals^2)) # 0.819
sqrt(mean(mD_BA.gamma$residuals^2)) # 0.819
sqrt(mean(BA_logn$residuals^2)) # 1.04
# adding in covariates
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.gamma, main= "Gamma")
plot(mD_BA.gamma.all, main="All covariates")
plot(mD_BA.gamma.slope, main="Slope")
summary(mD_BA.gamma) # AIC 58.2
summary(mD_BA.gamma.slope) # AIC 58.8
class(ba$TREAT)
DECID_BA$TREAT <- as.factor(DECID_BA$TREAT)
mD_BA.log <- lm(log(BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)						#models E[log(y)]
mD_BA.ga <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = gaussian(link = "log"), data = DECID_BA)	#models log[E(y)]
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
#another option, look up lognormal distributions
BA_logn <- lognlm((BA)  ~ TREAT + SITE + (TREAT*SITE), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.log, main= "Logged")
plot(mD_BA.ga, main="Guassian")
plot(mD_BA.gamma, main="Gamma")
#choosing a distribution is often best done with an understanding of the relationship between variance and mean
#Gaussian has constant variance; gamma and lognormal do not.
#heteroskedastic
par(mfrow=c(1,4))
plot((DECID_BA$BA),residuals(mD_BA.log),main="log"); abline(h=0)
plot((DECID_BA$BA),residuals(mD_BA.ga), main="Gaussian"); abline(h=0)	#pretty clear Gaussian is not great.
plot((DECID_BA$BA),residuals(mD_BA.gamma), main="Gamma"); abline(h=0)
plot((DECID_BA$BA),residuals(BA_logn), main="Lognormal"); abline(h=0)
# parameters
summary(mD_BA.log)
summary(mD_BA.ga) # AIC 133
summary(mD_BA.gamma) # AIC 64
summary(mD_BA.gamma) # AIC 58
summary(BA_logn)
#Compare root mean squared error
sqrt(mean(mD_BA.log$residuals^2)) # 0.96
sqrt(mean(mD_BA.ga$residuals^2)) # 1.77
sqrt(mean(mD_BA.gamma$residuals^2)) # 0.79
sqrt(mean(BA_logn$residuals^2)) # 1.21
# adding in covariates
mD_BA.gamma <- glm(BA  ~ TREAT + SITE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
mD_BA.gamma.slope <- glm(BA  ~ TREAT + SITE + SLOPE + (TREAT*SITE), family = Gamma(link = "log"), data = DECID_BA)
par(mfrow=c(4,4))
plot(mD_BA.gamma, main= "Gamma")
plot(mD_BA.gamma.slope, main="Slope")
summary(mD_BA.gamma) # AIC 64
summary(mD_BA.gamma) # AIC 58
summary(mD_BA.gamma.slope) # AIC 62
summary(mD_BA.gamma) # AIC 58.2
summary(mD_D.nb) # AIC 1087
summary(mD_D.nb) # AIC 1087
summary(mC_D.nb) # AIC 924
summary(mC_D.nb) # AIC 924
summary(mD_D.nb) # AIC 1087
summary(mC_D.nb) # AIC 924
confint(mC_D.nb)
df(mC_D.nb)
dof(mC_D.nb)
summary(mD_D.nb) # AIC 1087
confint(mD_D.nb)
confint(mD_BA.gamma)
summary(mD_BA.gamma) # AIC 58.2
library(here)
library(cowplot)
library(dplyr)
theme_set(theme_cowplot())
theme_set(theme_cowplot())
library(cowplot)
theme_set(theme_cowplot())
org_depth <- read.csv(here("data/org_depth.csv"))
View(org_depth)
org_depth %>%
filter(TREATMENT == 0) %>%
summarise(mean(ORG_DEPTH))
org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
View(org_treat)
org_depth <- read.csv(here("data/org_depth.csv"))
org_treat <- org_depth %>%
group_by(SITE, TREATMENT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREAT) %>%
summarise(mean(ORG_DEPTH))
org_treat <- org_depth %>%
group_by(SITE, TREAT) %>%
summarise(AV_DEPTH = mean(ORG_DEPTH))
org_treat$AV_DEPTH <- round(org_treat$AV_DEPTH, digits = 2)
3.09/5.78
5.78/3.09
10.91/9.8
3.09/1.87
9.8/2.94
exposed_min <- read.csv(here("data/exposed_min.csv"))
expose_min_plot <- ggplot(exposed_min,
aes(x = factor(exposed_min$TREATMENT),
y = exposed_min$MINERAL,
fill = exposed_min$SITE)) +
geom_boxplot() +
scale_fill_manual(name = "Site Type",
values = c("#d9d9d9", "#ffffff"),
labels = c("Upland", "Lowland")) +
labs(title = "Exposed Mineral Soil",
x = "Number of Fires", y = "% of Mineral Soil Exposed") +
theme(plot.title = element_text(hjust = 0))
library(ggplot2)
library(ggplot2); library(cowplot)
library(cowplot)
library(cowplot) ; theme_set(theme_cowplot())
expose_min_plot <- ggplot(exposed_min,
aes(x = factor(exposed_min$TREATMENT),
y = exposed_min$MINERAL,
fill = exposed_min$SITE)) +
geom_boxplot() +
scale_fill_manual(name = "Site Type",
values = c("#d9d9d9", "#ffffff"),
labels = c("Upland", "Lowland")) +
labs(title = "Exposed Mineral Soil",
x = "Number of Fires", y = "% of Mineral Soil Exposed") +
theme(plot.title = element_text(hjust = 0))
expose_min_plot
